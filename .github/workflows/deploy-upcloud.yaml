name: Deploy Frontend App (ReactJS) to UpCloud Kubernetes

on:
  push:
    branches: [ main, master, dev ]
    paths:
      - '.github/workflows/deploy-upcloud.yaml'
      - 'deployment.yml'
      - 'service.yml'
  pull_request:
    branches: [ main, master, dev ]

env:
  DOCKER_IMAGE: joelwembo/frontend_app_demo
  KUBE_NAMESPACE: default
  CLUSTER_NAME: prodxcloud-cluster-dev
  UPCLOUD_CLUSTER_ID: 0de3f068-f987-4df6-b15a-c0f667b239aa

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Build React App
        run: |
          npm install --force
          npm run build

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker
        uses: docker/build-push-action@v5
        with:
          context: ./
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

      - name: Install and Configure UpCloud CLI
        run: |
          # Install required packages
          sudo apt-get update
          sudo apt-get install -y curl jq
          
          # Download and install upctl
          UPCTL_VERSION=$(curl -s https://api.github.com/repos/UpCloudLtd/upcloud-cli/releases/latest | jq -r .tag_name)
          echo "Installing UpCloud CLI version: $UPCTL_VERSION"
          
          # Download with verbose output to see what's happening
          curl -v -L "https://github.com/UpCloudLtd/upcloud-cli/releases/download/${UPCTL_VERSION}/upctl-linux-amd64" -o upctl
          
          # Check file content
          echo "File content preview:"
          head -n 5 upctl
          
          # Make it executable and move to PATH
          chmod +x upctl
          sudo mv upctl /usr/local/bin/
          
          # Verify installation
          which upctl
          
          # Try to run with full path
          /usr/local/bin/upctl version || echo "Failed to run upctl directly"
          
          # Set UpCloud credentials from GitHub Secrets
          export UPCLOUD_USERNAME=${{ secrets.UPCLOUD_USERNAME }}
          export UPCLOUD_PASSWORD=${{ secrets.UPCLOUD_PASSWORD }}
          
          # Generate kubeconfig using the kubeconfig from secrets instead
          echo "${{ secrets.UPCLOUD_KUBECONFIG }}" > prodxcloud-cluster-dev_kubeconfig.yaml
          
          # Verify kubeconfig was created
          if [ ! -f prodxcloud-cluster-dev_kubeconfig.yaml ]; then
            echo "Failed to generate kubeconfig"
            exit 1
          fi
          
          # Set KUBECONFIG environment variable
          export KUBECONFIG=$(pwd)/prodxcloud-cluster-dev_kubeconfig.yaml
          
          # Verify cluster access
          kubectl cluster-info

      - name: Deploy to UpCloud
        run: |
          # Save kubeconfig with the correct filename
          echo "${{ secrets.UPCLOUD_KUBECONFIG }}" > prodxcloud-cluster-dev_kubeconfig.yaml
          export KUBECONFIG=prodxcloud-cluster-dev_kubeconfig.yaml
          
          # List available contexts
          echo "Available contexts:"
          kubectl config get-contexts
          
          # Use the correct context
          kubectl config use-context ${{ env.CLUSTER_NAME }}
          
          # Create namespace if it doesn't exist
          kubectl create namespace ${{ env.KUBE_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
          
          # Create Docker Hub secret
          kubectl create secret docker-registry dockerhub-secret \
            --docker-server=https://index.docker.io/v1/ \
            --docker-username=${{ secrets.DOCKERHUB_USERNAME }} \
            --docker-password=${{ secrets.DOCKERHUB_TOKEN }} \
            --docker-email=${{ secrets.DOCKERHUB_EMAIL }} \
            -n ${{ env.KUBE_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply Kubernetes manifests
          kubectl apply -f deployment.yml
          kubectl apply -f service.yml
          
          # Update deployment with new image
          kubectl set image deployment/frontend frontend=${{ env.DOCKER_IMAGE }}:latest -n ${{ env.KUBE_NAMESPACE }}
          
          # Wait for rollout to complete
          kubectl rollout status deployment/frontend -n ${{ env.KUBE_NAMESPACE }}

      - name: Check Deployment Status
        run: |
          # Save kubeconfig with the correct filename
          echo "${{ secrets.UPCLOUD_KUBECONFIG }}" > prodxcloud-cluster-dev_kubeconfig.yaml
          export KUBECONFIG=prodxcloud-cluster-dev_kubeconfig.yaml
          
          # Use the correct context
          kubectl config use-context ${{ env.CLUSTER_NAME }}
          
          echo "=== Pods Status ==="
          kubectl get pods -n ${{ env.KUBE_NAMESPACE }} -o wide
          
          echo "=== Services Status ==="
          kubectl get svc -n ${{ env.KUBE_NAMESPACE }}
          
          echo "=== Deployment Status ==="
          kubectl get deployment -n ${{ env.KUBE_NAMESPACE }}
          
          echo "=== Pod Logs ==="
          kubectl logs -l app=frontend -n ${{ env.KUBE_NAMESPACE }} --tail=50
 